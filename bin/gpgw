#!/usr/bin/env bash

set -e

die() {
	echo "$@" 1>&2
	exit 1
}

default_key=contact@stephanedewit.be

primary_key_sdw=A693C41B530AC742094DD3B9D65BBB43F04DD008
sub_keys_sdw=(
	3682E7F3DEE381C5D064404286F7DFC9FBE78E02
	C91F43A3BFD811EFB4EEB81CC1E2CE78B3B38CCC
)
primary_key_28s=DBE2625E3670BACBCA7778D975A59D54E6D3FE6A
sub_keys_28s=(
	D3DDA2B4190D50E04C1C451E3B7DB492867DE2DD
	89EF3C41E7557AA72299CCF42247BB588F41A764
)

encrypt=0
decrypt=0
sign=-1
verify=0

recipient=$default_key
sign_key=$default_key
keep=1

set_expire_subs=0
set_expire_primary=0

while getopts ":edsSvr:u:kKxX" opt; do
	case $opt in
		e ) encrypt=1;;
		d ) decrypt=1;;
		s ) sign=1;;
		S ) sign=0;;
		v ) verify=1;;
		r ) recipient=$OPTARG;;
		u ) sign_key=$OPTARG;;
		k ) keep=1;;
		K ) keep=0;;
		x ) set_expire_subs=1;;
		X ) set_expire_primary=1;;
		: ) die "-$OPTARG requires an argument";;
		\?) die "Invalid option: -$OPTARG";;
	esac
done

shift $((OPTIND - 1))

actions_count=$((
	encrypt +
	decrypt +
	verify +
	set_expire_subs +
	set_expire_primary
))

if [ $encrypt -ne 1 ] && [ $sign -eq 1 ]; then
	actions_count=$(( actions_count + 1 ))
fi

if [ $set_expire_subs -eq 1 ] && [ $set_expire_primary -eq 1 ]; then
	actions_count=$(( actions_count - 1 ))
fi

[ $actions_count -lt 1 ] && die "Missing -e, -d, -s, -v, -x or -X"
[ $actions_count -gt 1 ] && die "Multiple actions specified"

if [ $((set_expire_subs + set_expire_primary)) -ge 1 ]; then
	set_expire() {
		primary=$1
		shift

		gpg --import "$HOME/pki/gnupg/$primary/secret_key.asc"

		if [ $set_expire_primary -eq 1 ]; then
			gpg --quick-set-expire "$primary" 2y
		fi

		if [ $set_expire_subs -eq 1 ]; then
			gpg --quick-set-expire "$primary" 6m "$@"
		fi

		gpg --export-secret-keys --armor "$primary" > \
			"$HOME/pki/gnupg/$primary/secret_key.asc"

		gpg --export-secret-subkeys --armor "$primary" > \
			"$HOME/pki/gnupg/$primary/secret_subkeys.asc"

		gpg --delete-secret-keys "$primary"
		gpg --import "$HOME/pki/gnupg/$primary/secret_subkeys.asc"
		rm "$HOME/pki/gnupg/$primary/secret_subkeys.asc"
	}

	set_expire $primary_key_sdw "${sub_keys_sdw[@]}"
	set_expire $primary_key_28s "${sub_keys_28s[@]}"

	exit 0
fi

if [ "$(uname -s)" == Darwin ]; then
	chown_r=(gchown --reference)
	chmod_r=(gchmod --reference)
	touch_r=(touch -r)
else
	chmod_r=(chmod --reference)
	chown_r=(chown --reference)
	touch_r=(touch -r)
fi

for file in "$@"; do
	[ -e "$file" ] || die "$file missing"

	if [ $encrypt -eq 1 ]; then
		[ "${file: -4}" == ".gpg" ] && die "$file is already encrypted"

		out=${file}.gpg

		parameters=(--encrypt --recipient "$recipient")

		if [ $sign -ne 0 ]; then
			parameters=("${parameters[@]}" --sign --local-user "$sign_key")
		fi
	elif [ $decrypt -eq 1 ]; then
		[ "${file: -4}" == ".gpg" ] || die "$file is not encrypted"

		out=${file%.*}

		parameters=(--decrypt)
	elif [ $sign -eq 1 ]; then
		out=${file}.asc

		parameters=(--detach-sig --armor --local-user "$sign_key")
	elif [ $verify -eq 1 ]; then
		if [ "${file: -4}" == ".asc" ]; then
			sig=${file}
			file=${file%.*}

			computed_path=$file
		else
			sig=${file}.asc

			computed_path=$sig
		fi

		[ -e "$computed_path" ] || die "$computed_path missing"

		parameters=(--verify "$sig")
	else
		die "Unknown operation"
	fi

	if [ "$out" != "" ]; then
		[ -e "$out" ] && die "$out already exists"
		parameters=("${parameters[@]}" --output "$out")
	fi

	gpg "${parameters[@]}" "$file"

	if [ $encrypt -ne 1 ] && [ $decrypt -ne 1 ]; then
		continue
	fi

	"${chown_r[@]}" "$file" "$out"
	"${chmod_r[@]}" "$file" "$out"
	"${touch_r[@]}" "$file" "$out"

	if [ $keep -eq 0 ]; then
		rm "$file"
	fi
done
